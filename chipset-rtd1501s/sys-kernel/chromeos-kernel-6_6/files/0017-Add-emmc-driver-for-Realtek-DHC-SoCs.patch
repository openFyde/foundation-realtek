From 3a8b4a39cc494d4c6ffd12db000a5c9b586ec47c Mon Sep 17 00:00:00 2001
From: James Tai <james.tai@realtek.com>
Date: Thu, 10 Nov 2022 17:36:35 +0800
Subject: [PATCH] mmc: host: add emmc driver for Realtek DHC SoCs

- modify inline encryption feature

Change-Id: I35d4358f944dacaa9f9cad927d5f29842c48dff1
---
 drivers/mmc/host/Kconfig      | 43 +++++++++++++++++++++++++++++++++++
 drivers/mmc/host/Makefile     |  4 ++++
 drivers/mmc/host/cqhci-core.c |  5 ++++
 drivers/mmc/host/cqhci.h      |  2 ++
 4 files changed, 54 insertions(+)

--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -763,6 +763,29 @@
 
 	  If unsure, say Y.
 
+config MMC_DW_CQE
+	tristate "Synopsys DesignWare Memory Card with CQE Interface"
+	depends on ARC || ARM || ARM64 || MIPS || COMPILE_TEST
+	select MMC_CQHCI
+	help
+	  This selects support for the Synopsys DesignWare Mobile Storage IP
+	  block, this provides host support for SD and MMC interfaces, in both
+	  PIO, internal DMA mode and external DMA mode.
+
+config MMC_DW_CQE_PLTFM
+	tristate "Synopsys Designware MCI with CQE Support as platform device"
+	depends on MMC_DW_CQE
+	default y
+	help
+	  This selects the common helper functions support for Host Controller
+	  Interface based platform driver. Please select this option if the IP
+	  is present as a platform device. This is the common interface for the
+	  Synopsys Designware IP.
+
+	  If you have a controller with this interface, say Y or M here.
+
+	  If unsure, say Y.
+
 config MMC_DW_BLUEFIELD
 	tristate "BlueField specific extensions for Synopsys DW Memory Card Interface"
 	depends on MMC_DW
@@ -1056,6 +1079,26 @@
 	  This selects support for the SD/MMC Host Controller on
 	  Actions Semi Owl SoCs.
 
+config MMC_DW_CQE_RTK13XX
+	tristate "Realtek RTD13XX specific extensions for Synopsys DW Memory Card Interface"
+	depends on MMC_DW_CQE
+	select MMC_DW_CQE_PLTFM
+	select REGULATOR_FIXED_VOLTAGE
+	help
+	  This selects support for Realtek SoC specific extensions to the
+	  Synopsys DesignWare Memory Card Interface driver. Select this option
+	  for platforms based on RTD16xx SoC's.
+
+config MMC_DW_CQE_RTK
+	tristate "Realtek Soc's specific extensions for Synopsys DW Memory Card Interface After Stark"
+	depends on MMC_DW_CQE
+	select MMC_DW_CQE_PLTFM
+	select REGULATOR_FIXED_VOLTAGE
+	help
+	  This selects support for Realtek SoC specific extensions to the
+	  Synopsys DesignWare Memory Card Interface driver. Select this option
+	  for platforms after RTD16xxb SoC's.
+
 config MMC_SDHCI_EXTERNAL_DMA
 	bool
 
--- a/drivers/mmc/host/Makefile
+++ b/drivers/mmc/host/Makefile
@@ -101,6 +101,10 @@
 cqhci-$(CONFIG_MMC_CRYPTO)		+= cqhci-crypto.o
 obj-$(CONFIG_MMC_HSQ)			+= mmc_hsq.o
 obj-$(CONFIG_MMC_LITEX)			+= litex_mmc.o
+obj-$(CONFIG_MMC_DW_CQE)        	+= dw_mmc_cqe.o
+obj-$(CONFIG_MMC_DW_CQE_PLTFM)  	+= dw_mmc_cqe-pltfm.o
+obj-$(CONFIG_MMC_DW_CQE_RTK13XX)	+= dw_mmc_cqe-rtk13xx.o
+obj-$(CONFIG_MMC_DW_CQE_RTK)		+= dw_mmc_cqe-rtk.o
 
 ifeq ($(CONFIG_CB710_DEBUG),y)
 	CFLAGS-cb710-mmc	+= -DDEBUG
--- a/drivers/mmc/host/cqhci-core.c
+++ b/drivers/mmc/host/cqhci-core.c
@@ -516,6 +516,11 @@
 
 	desc = get_trans_desc(cq_host, tag);
 
+	if (cq_host->ops->setup_tran_desc) {
+                cq_host->ops->setup_tran_desc(data, cq_host, desc, sg_count);
+                return 0;
+        }
+
 	for_each_sg(data->sg, sg, sg_count, i) {
 		addr = sg_dma_address(sg);
 		len = sg_dma_len(sg);
--- a/drivers/mmc/host/cqhci.h
+++ b/drivers/mmc/host/cqhci.h
@@ -119,6 +119,29 @@
 /* command response argument */
 #define CQHCI_CRA			0x5C
 
+#define CQHCI_CRNQP                    0x70
+#define CQHCI_CRNQDUN                  0x74
+
+//CFG0_key1
+#define CRYPTOCFG_0_0                  0x800
+#define CRYPTOCFG_0_1                  0x804
+#define CRYPTOCFG_0_2                  0x808
+#define CRYPTOCFG_0_3                  0x80c
+#define CRYPTOCFG_0_4                  0x810
+#define CRYPTOCFG_0_5                  0x814
+#define CRYPTOCFG_0_6                  0x818
+#define CRYPTOCFG_0_7                  0x81c
+//CFG0_key2
+#define CRYPTOCFG_0_8                  0x820
+#define CRYPTOCFG_0_9                  0x824
+#define CRYPTOCFG_0_10                 0x828
+#define CRYPTOCFG_0_11                 0x82c
+#define CRYPTOCFG_0_12                 0x830
+#define CRYPTOCFG_0_13                 0x834
+#define CRYPTOCFG_0_14                 0x838
+#define CRYPTOCFG_0_15                 0x83c
+//CFG0_config
+#define CRYPTOCFG_0_16                 0x840
 /* crypto capabilities */
 #define CQHCI_CCAP			0x100
 #define CQHCI_CRYPTOCAP			0x104
@@ -289,6 +312,8 @@
 				 u64 *data);
 	void (*pre_enable)(struct mmc_host *mmc);
 	void (*post_disable)(struct mmc_host *mmc);
+	void (*setup_tran_desc)(struct mmc_data *data,
+                struct cqhci_host *cq_host, u8 *desc, int sg_count);
 #ifdef CONFIG_MMC_CRYPTO
 	int (*program_key)(struct cqhci_host *cq_host,
 			   const union cqhci_crypto_cfg_entry *cfg, int slot);
--- a/drivers/mmc/host/cqhci-crypto.h
+++ b/drivers/mmc/host/cqhci-crypto.h
@@ -28,6 +28,10 @@
 	/* We set max_dun_bytes_supported=4, so all DUNs should be 32-bit. */
 	WARN_ON_ONCE(mrq->crypto_ctx->bc_dun[0] > U32_MAX);
 
+#if IS_ENABLED(CONFIG_MMC_DW_CQE_RTK)
+        return (CQHCI_CRYPTO_ENABLE_BIT |
+                CQHCI_CRYPTO_KEYSLOT(mrq->crypto_key_slot)) + mrq->data->blk_addr;
+#endif
 	return CQHCI_CRYPTO_ENABLE_BIT |
 	       CQHCI_CRYPTO_KEYSLOT(mrq->crypto_key_slot) |
 	       mrq->crypto_ctx->bc_dun[0];
