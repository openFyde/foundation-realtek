From 26b45836ceb5c9192bfc44cdbdd2f47cf44c0c70 Mon Sep 17 00:00:00 2001
From: simon_hsu <simon_hsu@realtek.com>
Date: Fri, 26 Apr 2024 16:14:40 +0800
Subject: [PATCH] gpu: drm: realtek: fix DHCA14-586, drm driver call trace when
 bootup [Information] implement drm_plane_funcs->reset function instead of
 drm_atomic_helper_plane_reset because we have our own plane state structure

Change-Id: Ia969a1ad4b3f075e0f97ceb95559194e646ed455
---
 drivers/gpu/drm/realtek/rtk_drm_plane.c | 27 +++++++++++++++++++------
 1 file changed, 21 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/realtek/rtk_drm_plane.c b/drivers/gpu/drm/realtek/rtk_drm_plane.c
index 88778aa9e54f..d32b78573cb7 100644
--- a/drivers/gpu/drm/realtek/rtk_drm_plane.c
+++ b/drivers/gpu/drm/realtek/rtk_drm_plane.c
@@ -720,7 +720,7 @@ static int rtk_plane_rpc_init(struct rtk_drm_plane *rtk_plane,
 	else if(videoplane == VO_VIDEO_PLANE_SUB1)
 		err = device_create_file(drm->dev, &dev_attr_enable_sub_display);
 	else
-		DRM_ERROR("Not create %d plane for device attribute\n", videoplane);
+		DRM_DEBUG("Not create %d plane for device attribute\n", videoplane);
 
 	if (err < 0)
 		DRM_ERROR("failed to create %d plane devide attribute\n", videoplane);
@@ -764,7 +764,7 @@ void rtk_plane_destroy(struct drm_plane *plane)
 }
 
 struct drm_plane_state *
-rtk_plane_atomic_helper_plane_duplicate_state(struct drm_plane *plane)
+rtk_plane_atomic_plane_duplicate_state(struct drm_plane *plane)
 {
 	struct rtk_drm_plane_state *state;
 	struct rtk_drm_plane_state *copy;
@@ -782,13 +782,28 @@ rtk_plane_atomic_helper_plane_duplicate_state(struct drm_plane *plane)
 	return &copy->state;
 }
 
-void rtk_plane_atomic_helper_plane_destroy_state(struct drm_plane *plane,
+void rtk_plane_atomic_plane_destroy_state(struct drm_plane *plane,
 					   struct drm_plane_state *state)
 {
 	__drm_atomic_helper_plane_destroy_state(state);
 	kfree(to_rtk_plane_state(state));
 }
 
+static void rtk_plane_atomic_plane_reset(struct drm_plane *plane)
+{
+	struct rtk_drm_plane_state *state;
+
+	if (plane->state) {
+		rtk_plane_atomic_plane_destroy_state(plane, plane->state);
+		plane->state = NULL;
+	}
+
+	state = kzalloc(sizeof(*state), GFP_KERNEL);
+	if (!state)
+		return;
+
+	__drm_atomic_helper_plane_reset(plane, &state->state);
+}
 
 static int rtk_plane_atomic_set_property(struct drm_plane *plane,
 				   struct drm_plane_state *state,
@@ -870,9 +885,9 @@ static const struct drm_plane_funcs rtk_plane_funcs = {
 	.update_plane = drm_atomic_helper_update_plane,
 	.destroy = rtk_plane_destroy,
 	.disable_plane = drm_atomic_helper_disable_plane,
-	.reset = drm_atomic_helper_plane_reset,
-	.atomic_duplicate_state = rtk_plane_atomic_helper_plane_duplicate_state,
-	.atomic_destroy_state = rtk_plane_atomic_helper_plane_destroy_state,
+	.reset = rtk_plane_atomic_plane_reset,
+	.atomic_duplicate_state = rtk_plane_atomic_plane_duplicate_state,
+	.atomic_destroy_state = rtk_plane_atomic_plane_destroy_state,
 	.atomic_set_property = rtk_plane_atomic_set_property,
 	.atomic_get_property = rtk_plane_atomic_get_property,
 	.format_mod_supported = rtk_plane_mod_supported,
-- 
2.45.2

